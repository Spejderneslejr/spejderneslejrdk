# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: "drupal"

# The runtime the application uses.
type: "php:7.4"

runtime:
  extensions:
    - redis

# Configuration of the build of this application.
build:
  flavor: composer

variables:
  php:
    memory_limit: 256M
  env:
      # Update these for your desired NVM and Node versions.
      NVM_VERSION: v0.38.0
      NODE_VERSION: v14


# The build-time dependencies of the app.
dependencies:
  php:
    composer/composer: "^2.0"
  nodejs:
    gulp-cli: "latest"
    yarn: "*"

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  database: "mysqldb:mysql"
  redis: "rediscache:redis"

# The configuration of app when it is exposed to the web.
web:
  # Specific parameters for different URL prefixes.
  locations:
    "/":
      # The folder to serve static assets for this location from.
      # (Relative to the application root.)
      root: "web"

      # How long to allow static assets from this location to be cached.
      # (Can be a time or -1 for no caching. Times can be suffixed with
      # "ms" (milliseconds), "s" (seconds), "m" (minutes), "h" (hours),
      # "d" (days), "w" (weeks), "M" (months, 30d) or "y" (years, 365d).)
      expires: 5m

      # Whether to forward disallowed and missing resources from this
      # location to the application.
      # (Can be true, false or a URI path string.)
      passthru: "/index.php"

      # Deny access to static files in this location.
      allow: false

      # Rules for specific URI patterns.
      rules:
        # Allow access to common static files.
        ? '\.(jpe?g|png|gif|svgz?|css|js|map|ico|bmp|eot|woff2?|otf|ttf|webmanifest)$'
        : allow: true
        '^/robots\.txt$':
          allow: true
        '^/sitemap\.xml$':
          allow: true

    "/sites/default/files":
      # Allow access to all files in the public files directory.
      allow: true
      expires: 7d
      passthru: "/index.php"
      root: "web/sites/default/files"

      # Do not execute PHP scripts.
      scripts: false

      rules:
        # Provide a longer TTL (2 weeks) for aggregated CSS and JS files.
        "^/sites/default/files/(css|js)":
          expires: 2w

    "/apps/job":
      # Setup a route for the job app
      allow: true
      expires: 7d
      root: "apps/jobs/dist"

      # Do not execute PHP scripts.
      scripts: false

          # The size of the persistent disk of the application (in MB).
disk: 8192

# The mounts that will be performed when the package is deployed.
mounts:
  "/web/sites/default/files": "shared:files/files"
  "/tmp": "shared:files/tmp"
  "/private": "shared:files/private"

# The hooks executed at various points in the lifecycle of the application.
hooks:
  build: |
    set -e
    curl -sS https://platform.sh/cli/installer | php
    # Install alternative node version
    unset NPM_CONFIG_PREFIX
    export NVM_DIR="$PLATFORM_APP_DIR/.nvm"
    # install.sh will automatically install NodeJS based on the presence of $NODE_VERSION
    curl -f -o- https://raw.githubusercontent.com/nvm-sh/nvm/$NVM_VERSION/install.sh | bash
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

    # Build css assets
    cd $PLATFORM_APP_DIR/web/themes/custom/camp
    yarn build:css

    # Build and deploy apps
    cd $PLATFORM_APP_DIR/apps/jobs
    yarn install
    yarn build

  # We run deploy hook after your application has been deployed and started.
  deploy: |
    cd "$PLATFORM_DOCUMENT_ROOT"
    $PLATFORM_APP_DIR/vendor/bin/drush deploy
    $PLATFORM_APP_DIR/vendor/bin/drush locale-check
    $PLATFORM_APP_DIR/vendor/bin/drush locale-update
    $PLATFORM_APP_DIR/vendor/bin/drush cache:rebuild

# The configuration of scheduled execution.
crons:
  drupal:
    spec: "*/5 * * * *"
    cmd: |
      cd "$PLATFORM_DOCUMENT_ROOT"
      $PLATFORM_APP_DIR/vendor/bin/drush core:cron --uri=$(platform route:get --primary --property=url)

  mastecam:
    spec: "*/5 * * * *"
    cmd: |
      $PLATFORM_APP_DIR/scripts/fetch-mastecam.sh

  backup:
    spec: '15 0 * * *'
    cmd: |
        if [ "$PLATFORM_ENVIRONMENT_TYPE" = production ]; then
            platform backup:create --yes --no-wait
        fi
  renewcert:
    # Force a redeploy at 3 am (UTC) on the 1st and 15th of every month.
    spec: "0 3 1,15 * *"
    cmd: |
      if [ "$PLATFORM_BRANCH" = master ]; then
          platform redeploy --yes --no-wait
      fi
