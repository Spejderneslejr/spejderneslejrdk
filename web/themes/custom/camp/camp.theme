<?php

use Drupal\Component\Plugin\Exception\PluginException;
use Drupal\Core\Menu\MenuLinkManagerInterface;
use Drupal\file_entity\Entity\FileEntity;
use Drupal\node\Entity\Node;

/**
 * @file
 * Functions to support theming in the camp theme.
 */

/**
 * Implements hook_preprocess_block().
 */
function camp_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'system_branding_block':
      // Sønderborg logo.
      $variables['sonderborg_logo'] = '/' . drupal_get_path('theme', 'camp') . '/images/sonderborg_logo.png';

      // Site logo.
      $variables['logo'] = '/' . drupal_get_path('theme', 'camp') . '/svg/logo.svg';
      $variables['logo_alt'] = '/' . drupal_get_path('theme', 'camp') . '/svg/logo_alt.svg';

      // TODO(ts) - Event info. Hardcoded for now, should be a config variable.
      $variables['event_info'] = 'Sønderborg 22.-30. juli 2017';

      // Get language id. We use this to get correct homepage based on language.
      $variables['language_id'] = \Drupal::languageManager()
        ->getCurrentLanguage()
        ->getId();
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Use custom template for language site menus.
 */
function camp_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  switch ($variables['menu_name']) {
    case 'site-menu-danish':
    case 'site-menu-german':
    case 'site-menu-english':
      $suggestions[] = 'menu__site_menu';
      break;
  }
}

/**
 * Implements template_preprocess_paragraph().
 */
function camp_preprocess_paragraph(&$variables) {
  // Get paragraph entity and bundle.
  $paragraph = $variables['paragraph'];
  $bundle = $paragraph->bundle();

  // Do things based on bundle.
  switch ($bundle) {
    case 'image':
      // Get Caption.
      $image = $paragraph->field_paragraph_image->entity;
      $variables['caption'] = !empty($image->field_image_caption->value) ?
        $image->field_image_caption->value : '';
      $variables['credits'] = camp_get_translated_credits_from_image($image);
      break;

    case 'quote':
      // We perform a little magic behind the scenes here.
      // If the quote paragraph has a link we use that as a byline, with the
      // byline as a title.
      if (!empty($variables['content']['field_quote_link'][0])) {
        $variables['content']['field_quote_link'][0]['#title'] = $variables['content']['field_quote_byline'][0]['#context']['value'];
        $variables['content']['field_quote_byline'] = $variables['content']['field_quote_link'];
      }
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function camp_preprocess_node(&$variables) {
  if (isset($variables['node'])) {
    /** @var Node $node */
    $node = $variables['node'];
    if ($node->getType() == 'article') {
      _camp_preprocess_node_article($node, $variables);
    }
  }
}

/**
 * Prepare variables for article-nodes.
 */
function _camp_preprocess_node_article($node, &$variables) {
  // Get the parent menu-items title, default to empty string.
  $parent_title = NULL;

  /** @var MenuLinkManagerInterface $menu_link_manager */
  $menu_link_manager = \Drupal::service('plugin.manager.menu.link');

  /** @var \Drupal\Core\Menu\MenuActiveTrailInterface $trial */
  $trial = \Drupal::service('menu.active_trail');
  $active_link = $trial->getActiveLink();
  if (!empty($active_link) && !empty($active_link->getParent())) {
    try {
      $parent = $menu_link_manager->createInstance($active_link->getParent());
      $parent_title = $parent->getTitle();
    }
    // Thrown if the instance could not be loaded above.
    catch (PluginException $e) {
      // Do nothing, default value has already been set.
    }
  }

  // Setup the top_image theme hook invocation.
  $top_image = [
    '#theme' => 'jamden_top_image',
    '#headline' => $node->field_tagline->value,
    '#sub_headline' => $parent_title,
    '#image' => $node->field_top_image->entity,
  ];

  $variables['top_image'] = $top_image;
  return $variables;
}

/**
 * Generate the proper credits string from an image file-entity.
 *
 * @param FileEntity $image
 *   Instansiated image.
 *
 * @return string
 *   Translated credits string
 */
function camp_get_translated_credits_from_image(FileEntity $image) {
  return (string) t(
    'Photo: @credits',
    ['@credits' => $image->field_image_credits->value]
  );
}
