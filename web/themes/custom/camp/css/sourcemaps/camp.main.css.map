{"version":3,"sources":["../node_modules/bourbon-neat/app/assets/stylesheets/grid/_box-sizing.scss","base/_vars.scss","base/_grid.scss","../node_modules/bourbon-neat/app/assets/stylesheets/grid/_span-columns.scss","../node_modules/bourbon-neat/app/assets/stylesheets/grid/_private.scss","../node_modules/bourbon-neat/app/assets/stylesheets/grid/_shift.scss","../node_modules/bourbon-neat/app/assets/stylesheets/grid/_media.scss","camp.main.css","../node_modules/bourbon-neat/app/assets/stylesheets/grid/_outer-container.scss","base/_mixins.scss","../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","base/_base.scss","atoms/_clock.scss","atoms/_flags.scss","../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","molecules/components/_header.scss","../node_modules/bourbon/app/assets/stylesheets/functions/_px-to-em.scss"],"names":[],"mappings":"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","file":"camp.main.css","sourcesContent":["@charset \"UTF-8\";\n\n@if $border-box-sizing == true {\n  html { // http://bit.ly/1qk2tVR\n    box-sizing: border-box;\n  }\n\n  * {\n    &,\n    &::after,\n    &::before {\n      box-sizing: inherit;\n    }\n  }\n}\n","$black-medium: rgb(51, 51, 51);\n\n$gray: rgb(194, 194, 194);\n$gray-medium: rgb(174, 174, 174);\n\n// Base font vars.\n$base-font-size: 16px;\n\n/**\n * Breakpoints.\n */\n$phone: new-breakpoint(max-width 480px);\n$tablet-p: new-breakpoint(max-width 768px);\n$tablet-l: new-breakpoint(max-width 1024px);\n$screen: new-breakpoint(min-width 1025px);\n$bigscreen: new-breakpoint(min-width 1200px);\n\n// z-index's\n$z-index-menu: 2;\n","@import \"bourbon\";\n@import \"neat\";\n@import \"vars\";\n@import \"mixins\";\n// Grid settings. Needs to be set before we bring in neat.\n$grid-columns: 12;\n$gutter: 0%;\n$max-width: 1200px;\n$column: 1em;\n$gutter: 0em;\n\n// Debug.\n$visual-grid: false;\n$visual-grid-index: front;\n\n@import \"neat\";\n\n// Grid loop magic.\n@for $i from 1 through $grid-columns {\n  .span-#{$i} {\n    @include span-columns($i);\n  }\n  .push-#{$i} {\n    @include shift($i);\n  }\n}\n\n@include media($tablet-l) {\n  [class*='span-'] {\n    @include span-columns(12);\n  }\n\n  [class*='push-'] {\n    @include shift(0);\n  }\n}\n\n// Plain and simple clear class.\n.clear {\n  clear: left;\n}\n\n/**\n * Global layouts.\n */\n.layout-container,\nbody:not(.is-node) main,\nbody.is-node article .node--content {\n  @include grid-container;\n}\n\nbody.is-node article .node--content {\n  position: relative;\n}\n","@charset \"UTF-8\";\n\n/// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.\n///\n/// @param {List} $span\n///   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).\n///\n///   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.\n///\n///   The values can be separated with any string such as `of`, `/`, etc.\n///\n///   `$columns` also accepts decimals for when it's necessary to break out of the standard grid. E.g. Passing `2.4` in a standard 12 column grid will divide the row into 5 columns.\n///\n/// @param {String} $display [block]\n///   Sets the display property of the element. By default it sets the display propert of the element to `block`.\n///\n///   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.\n///\n///   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.\n///\n/// @example scss - Usage\n///   .element {\n///     @include span-columns(6);\n///\n///    .nested-element {\n///      @include span-columns(2 of 6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///   .element {\n///     display: block;\n///     float: left;\n///     margin-right: 2.35765%;\n///     width: 48.82117%;\n///   }\n///\n///   .element:last-child {\n///     margin-right: 0;\n///   }\n///\n///   .element .nested-element {\n///     display: block;\n///     float: left;\n///     margin-right: 4.82916%;\n///     width: 30.11389%;\n///   }\n///\n///   .element .nested-element:last-child {\n///     margin-right: 0;\n///   }\n\n@mixin span-columns($span: $columns of $container-columns, $display: block) {\n  $columns: nth($span, 1);\n  $container-columns: container-span($span);\n\n  $parent-columns: get-parent-columns($container-columns) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  $display-table: is-display-table($container-display-table, $display);\n\n  @if $display-table  {\n    display: table-cell;\n    width: percentage($columns / $container-columns);\n  } @else {\n    float: #{$opposite-direction};\n\n    @if $display != no-display {\n      display: block;\n    }\n\n    @if $display == collapse {\n      @include -neat-warn(\"The 'collapse' argument will be deprecated. Use 'block-collapse' instead.\");\n    }\n\n    @if $display == collapse or $display == block-collapse {\n      width: flex-grid($columns, $container-columns) + flex-gutter($container-columns);\n\n      &:last-child {\n        width: flex-grid($columns, $container-columns);\n      }\n\n    } @else {\n      margin-#{$direction}: flex-gutter($container-columns);\n      width: flex-grid($columns, $container-columns);\n\n      &:last-child {\n        margin-#{$direction}: 0;\n      }\n    }\n  }\n}\n","$parent-columns: $grid-columns !default;\n$fg-column: $column;\n$fg-gutter: $gutter;\n$fg-max-columns: $grid-columns;\n$container-display-table: false !default;\n$layout-direction: LTR !default;\n\n@function flex-grid($columns, $container-columns: $fg-max-columns) {\n  $width: $columns * $fg-column + ($columns - 1) * $fg-gutter;\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($width / $container-width);\n}\n\n@function flex-gutter($container-columns: $fg-max-columns, $gutter: $fg-gutter) {\n  $container-width: $container-columns * $fg-column + ($container-columns - 1) * $fg-gutter;\n  @return percentage($gutter / $container-width);\n}\n\n@function grid-width($n) {\n  @return $n * $gw-column + ($n - 1) * $gw-gutter;\n}\n\n@function get-parent-columns($columns) {\n  @if $columns != $grid-columns {\n    $parent-columns: $columns !global;\n  } @else {\n    $parent-columns: $grid-columns !global;\n  }\n\n  @return $parent-columns;\n}\n\n@function is-display-table($container-is-display-table, $display) {\n  @return $container-is-display-table == true or $display == table;\n}\n","@charset \"UTF-8\";\n\n/// Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.\n///\n/// @param {Number (unitless)} $n-columns [1]\n///   Number of columns by which the element shifts.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -25.58941%;\n///   }\n\n@mixin shift($n-columns: 1) {\n  @include shift-in-context($n-columns);\n}\n\n/// Translates an element horizontally by a number of columns, in a specific nesting context.\n///\n/// @param {List} $shift\n///   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).\n///\n///   The two values can be separated with any string such as `of`, `/`, etc.\n///\n/// @example scss - Usage\n///   .element {\n///     @include shift(-3 of 6);\n///   }\n///\n/// @example css - CSS output\n///   .element {\n///     margin-left: -52.41458%;\n///   }\n\n@mixin shift-in-context($shift: $columns of $container-columns) {\n  $n-columns: nth($shift, 1);\n  $parent-columns: container-shift($shift) !global;\n\n  $direction: get-direction($layout-direction, $default-layout-direction);\n  $opposite-direction: get-opposite-direction($direction);\n\n  margin-#{$opposite-direction}: $n-columns * flex-grid(1, $parent-columns) + $n-columns * flex-gutter($parent-columns);\n\n  // Reset nesting context\n  $parent-columns: $grid-columns !global;\n}\n","@charset \"UTF-8\";\n\n/// Outputs a media-query block with an optional grid context (the total number of columns used in the grid).\n///\n/// @param {List} $query\n///   A list of media query features and values, where each `$feature` should have a corresponding `$value`.\n///   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).\n///\n///   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.\n///\n///   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).\n///\n///\n/// @param {Number (unitless)} $total-columns [$grid-columns]\n///   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.\n///\n/// @example scss - Usage\n///   .responsive-element {\n///      @include media(769px) {\n///        @include span-columns(6);\n///      }\n///   }\n///\n///  .new-context-element {\n///    @include media(min-width 320px max-width 480px, 6) {\n///      @include span-columns(6);\n///    }\n///  }\n///\n/// @example css - CSS Output\n///  @media screen and (min-width: 769px) {\n///    .responsive-element {\n///      display: block;\n///      float: left;\n///      margin-right: 2.35765%;\n///      width: 48.82117%;\n///    }\n///\n///    .responsive-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n///\n///  @media screen and (min-width: 320px) and (max-width: 480px) {\n///    .new-context-element {\n///      display: block;\n///      float: left;\n///      margin-right: 4.82916%;\n///      width: 100%;\n///    }\n///\n///    .new-context-element:last-child {\n///      margin-right: 0;\n///    }\n///  }\n\n@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {\n  @if length($query) == 1 {\n    @media screen and ($default-feature: nth($query, 1)) {\n      $default-grid-columns: $grid-columns;\n      $grid-columns: $total-columns !global;\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  } @else {\n    $loop-to: length($query);\n    $media-query: \"screen and \";\n    $default-grid-columns: $grid-columns;\n    $grid-columns: $total-columns !global;\n\n    @if is-not(is-even(length($query))) {\n      $grid-columns: nth($query, $loop-to) !global;\n      $loop-to: $loop-to - 1;\n    }\n\n    $i: 1;\n    @while $i <= $loop-to {\n      $media-query: $media-query + \"(\" + nth($query, $i) + \": \" + nth($query, $i + 1) + \") \";\n\n      @if ($i + 1) != $loop-to {\n        $media-query: $media-query + \"and \";\n      }\n\n      $i: $i + 2;\n    }\n\n    @media #{$media-query} {\n      @content;\n      $grid-columns: $default-grid-columns !global;\n    }\n  }\n}\n","html {\n  box-sizing: border-box;\n}\n\n*, *::after, *::before {\n  box-sizing: inherit;\n}\n\n/**\n * Breakpoints.\n */\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::after, *::before {\n  box-sizing: inherit;\n}\n\n.span-1 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 8.33333%;\n}\n\n.span-1:last-child {\n  margin-right: 0;\n}\n\n.push-1 {\n  margin-left: 8.33333%;\n}\n\n.span-2 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 16.66667%;\n}\n\n.span-2:last-child {\n  margin-right: 0;\n}\n\n.push-2 {\n  margin-left: 16.66667%;\n}\n\n.span-3 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 25%;\n}\n\n.span-3:last-child {\n  margin-right: 0;\n}\n\n.push-3 {\n  margin-left: 25%;\n}\n\n.span-4 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 33.33333%;\n}\n\n.span-4:last-child {\n  margin-right: 0;\n}\n\n.push-4 {\n  margin-left: 33.33333%;\n}\n\n.span-5 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 41.66667%;\n}\n\n.span-5:last-child {\n  margin-right: 0;\n}\n\n.push-5 {\n  margin-left: 41.66667%;\n}\n\n.span-6 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 50%;\n}\n\n.span-6:last-child {\n  margin-right: 0;\n}\n\n.push-6 {\n  margin-left: 50%;\n}\n\n.span-7 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 58.33333%;\n}\n\n.span-7:last-child {\n  margin-right: 0;\n}\n\n.push-7 {\n  margin-left: 58.33333%;\n}\n\n.span-8 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 66.66667%;\n}\n\n.span-8:last-child {\n  margin-right: 0;\n}\n\n.push-8 {\n  margin-left: 66.66667%;\n}\n\n.span-9 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 75%;\n}\n\n.span-9:last-child {\n  margin-right: 0;\n}\n\n.push-9 {\n  margin-left: 75%;\n}\n\n.span-10 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 83.33333%;\n}\n\n.span-10:last-child {\n  margin-right: 0;\n}\n\n.push-10 {\n  margin-left: 83.33333%;\n}\n\n.span-11 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 91.66667%;\n}\n\n.span-11:last-child {\n  margin-right: 0;\n}\n\n.push-11 {\n  margin-left: 91.66667%;\n}\n\n.span-12 {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 100%;\n}\n\n.span-12:last-child {\n  margin-right: 0;\n}\n\n.push-12 {\n  margin-left: 100%;\n}\n\n@media screen and (max-width: 1024px) {\n  [class*='span-'] {\n    float: left;\n    display: block;\n    margin-right: 0%;\n    width: 100%;\n  }\n  [class*='span-']:last-child {\n    margin-right: 0;\n  }\n  [class*='push-'] {\n    margin-left: 0%;\n  }\n}\n\n.clear {\n  clear: left;\n}\n\n/**\n * Global layouts.\n */\n.layout-container,\nbody:not(.is-node) main,\nbody.is-node article .node--content {\n  max-width: 1200px;\n  margin-left: auto;\n  margin-right: auto;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.layout-container::after,\nbody:not(.is-node) main::after,\nbody.is-node article .node--content::after {\n  clear: both;\n  content: \"\";\n  display: table;\n}\n\nbody.is-node article .node--content {\n  position: relative;\n}\n\n/**\n * Breakpoints.\n */\n.text-center {\n  text-align: center;\n}\n\n.clock {\n  text-transform: capitalize;\n  font-size: 0;\n  font-weight: bold;\n}\n\n.clock span {\n  font-size: 28px;\n}\n\n@media screen and (max-width: 1024px) {\n  .clock span {\n    font-size: 20px;\n  }\n}\n\n@media screen and (max-width: 768px) {\n  .clock span {\n    font-size: 16px;\n  }\n}\n\n.clock span.clock__unit {\n  padding-right: 10px;\n}\n\n.clock__number {\n  color: #333333;\n}\n\n.clock__unit {\n  color: #c2c2c2;\n}\n\n.language-flags {\n  list-style-type: none;\n  position: absolute;\n  top: -20px;\n  right: 0px;\n  width: auto;\n  height: 60px;\n  min-width: 100px;\n  padding-right: 25px;\n  float: none;\n}\n\n.language-flags li {\n  float: left;\n  width: 35px;\n}\n\n@media screen and (max-width: 768px) {\n  .language-flags {\n    display: none;\n  }\n}\n\n.language-flag {\n  width: 25px;\n  height: 50px;\n  background-position: 50% 50%;\n  background-size: 25px;\n  background-repeat: no-repeat;\n  float: left;\n  -webkit-filter: grayscale(70%);\n  filter: grayscale(70%);\n}\n\n.language-flag:hover {\n  -webkit-filter: grayscale(0%);\n  filter: grayscale(0%);\n}\n\n.language-flag.active {\n  -webkit-filter: grayscale(0%);\n  filter: grayscale(0%);\n}\n\n.language-flag--uk {\n  background-image: url(\"../svg/uk.svg\");\n}\n\n.language-flag--dk {\n  background-image: url(\"../svg/dk.svg\");\n}\n\n.language-flag--de {\n  background-image: url(\"../svg/de.svg\");\n}\n\n.region--header__logo {\n  text-align: center;\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 16.66667%;\n  padding: 5px 0;\n}\n\n.region--header__logo:last-child {\n  margin-right: 0;\n}\n\n@media screen and (max-width: 1024px) {\n  .region--header__logo {\n    padding: 0;\n  }\n  .region--header__logo img {\n    max-height: 140px;\n  }\n}\n\n@media screen and (max-width: 768px) {\n  .region--header__logo {\n    padding: 0;\n  }\n  .region--header__logo img {\n    max-height: 60px;\n  }\n}\n\n.region--header__sonderborg {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 41.66667%;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  max-height: 350px;\n  overflow: hidden;\n  padding: 50px 15px;\n  text-align: center;\n}\n\n.region--header__sonderborg:last-child {\n  margin-right: 0;\n}\n\n@media screen and (max-width: 768px) {\n  .region--header__sonderborg {\n    height: 70px;\n    min-height: 10px;\n    padding: 0;\n    text-align: center;\n  }\n}\n\n.region--header__sonderborg .region--header__sonderborg__image-wrapper {\n  width: 50%;\n  height: 100%;\n  float: right;\n  text-align: center;\n}\n\n.region--header__sonderborg .region--header__sonderborg__image-wrapper img {\n  max-width: 150px;\n}\n\n@media screen and (max-width: 1024px) {\n  .region--header__sonderborg .region--header__sonderborg__image-wrapper {\n    float: none;\n    height: auto;\n    width: auto;\n  }\n}\n\n@media screen and (max-width: 768px) {\n  .region--header__sonderborg .region--header__sonderborg__image-wrapper img {\n    max-width: 115px;\n  }\n}\n\n@media screen and (max-width: 480px) {\n  .region--header__sonderborg .region--header__sonderborg__image-wrapper img {\n    max-width: 90px;\n    padding-top: 14px;\n  }\n}\n\n.region--header__tasks {\n  float: left;\n  display: block;\n  margin-right: 0%;\n  width: 41.66667%;\n  position: relative;\n  height: 100%;\n  padding-top: 56px;\n  padding-left: 4%;\n}\n\n.region--header__tasks:last-child {\n  margin-right: 0;\n}\n\n@media screen and (max-width: 768px) {\n  .region--header__tasks {\n    padding-top: 10px;\n  }\n}\n\n@media screen and (max-width: 480px) {\n  .region--header__tasks {\n    display: none;\n  }\n}\n\n.region--header__logo__image-wrapper {\n  display: inline-block;\n  position: relative;\n  z-index: 1;\n}\n\n.page-header {\n  display: block;\n  width: 100%;\n  float: left;\n  z-index: 1100;\n  height: 15vh;\n  min-height: 150px;\n}\n\n@media screen and (max-width: 768px) {\n  .page-header {\n    height: 70px;\n    min-height: 10px;\n  }\n}\n\n.date {\n  color: #aeaeae;\n}\n\n.date--header {\n  font-weight: bold;\n  font-size: 0.875em;\n  margin-bottom: 5px;\n}\n","@charset \"UTF-8\";\n\n/// Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.\n/// Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.\n///\n/// @param {Number [unit]} $local-max-width [$max-width]\n///   Max width to be applied to the element. Can be a percentage or a measure.\n///\n/// @example scss - Usage\n///   .element {\n///     @include outer-container(100%);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     *zoom: 1;\n///     max-width: 100%;\n///     margin-left: auto;\n///     margin-right: auto;\n///   }\n///\n///   .element:before, .element:after {\n///     content: \" \";\n///     display: table;\n///   }\n///\n///   .element:after {\n///     clear: both;\n///   }\n\n@mixin outer-container($local-max-width: $max-width) {\n  @include clearfix;\n  max-width: $local-max-width;\n  margin: {\n    left: auto;\n    right: auto;\n  }\n}\n","@mixin grid-container {\n  @include outer-container;\n  margin-left: auto;\n  margin-right: auto;\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","@import \"grid\";\n@import \"mixins\";\n@import \"reset\";\n@import \"vars\";\n\n.text-center {\n  text-align: center;\n}\n",".clock {\n  text-transform: capitalize;\n  font-size: 0;\n  font-weight: bold;\n\n  span {\n    font-size: 28px;\n\n    @include media($tablet-l) {\n      font-size: 20px;\n    }\n\n    @include media($tablet-p) {\n      font-size: 16px;\n    }\n\n    &.clock__unit {\n      padding-right: 10px;\n    }\n  }\n}\n\n.clock__number {\n  color: $black-medium;\n}\n\n.clock__unit {\n  color: $gray;\n}\n",".language-flags {\n  list-style-type: none;\n  position: absolute;\n  top: -20px;\n  right: 0px;\n  width: auto;\n  height: 60px;\n  min-width: 100px;\n  padding-right: 25px;\n  float: none;\n\n  li {\n    float: left;\n    width: 35px;\n  }\n\n  // TODO(ts) -  we hide the flags for now\n  // but we will have to reimplement them, when we makes the menu\n  // where the flags will be placed on mobile and tablet portrait.\n  @include media($tablet-p) {\n    display: none;\n  }\n}\n\n.language-flag {\n  width: 25px;\n  height: 50px;\n  background-position: 50% 50%;\n  background-size: 25px;\n  background-repeat: no-repeat;\n  float: left;\n  @include filter(grayscale(70%));\n\n  &:hover {\n    @include filter(grayscale(0%));\n  }\n\n  &.active {\n    @include filter(grayscale(0%));\n  }\n}\n\n.language-flag--uk {\n  background-image: url(\"../svg/uk.svg\");\n}\n\n.language-flag--dk {\n  background-image: url(\"../svg/dk.svg\");\n}\n\n.language-flag--de {\n  background-image: url(\"../svg/de.svg\");\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n",".region--header__logo {\n  text-align: center;\n\n  @include span-columns(2);\n  padding: 5px 0;\n\n  @include media($tablet-l) {\n\n    padding: 0;\n\n    img {\n      max-height: 140px;\n    }\n  }\n\n  @include media($tablet-p) {\n\n    padding: 0;\n\n    img {\n      max-height: 60px;\n    }\n  }\n}\n\n.region--header__sonderborg {\n\n  @include span-columns(5);\n\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  max-height: 350px;\n  overflow: hidden;\n  padding: 50px 15px;\n  text-align: center;\n\n  @include media($tablet-p) {\n    height: 70px;\n    min-height: 10px;\n    padding: 0;\n    text-align: center;\n  }\n\n  .region--header__sonderborg__image-wrapper {\n    width: 50%;\n    height: 100%;\n    float: right;\n    text-align: center;\n\n    img {\n      max-width: 150px;\n    }\n\n    @include media($tablet-l) {\n      float: none;\n      height: auto;\n      width: auto;\n    }\n\n    @include media($tablet-p) {\n\n      img {\n        max-width: 115px;\n      }\n    }\n\n    @include media($phone) {\n\n      img {\n        max-width: 90px;\n        padding-top: 14px;\n      }\n    }\n  }\n}\n\n.region--header__tasks {\n  @include span-columns(5);\n\n  position: relative;\n  height: 100%;\n  padding-top: 56px;\n  padding-left: 4%;\n\n  @include media($tablet-p) {\n    padding-top: 10px;\n  }\n\n  @include media($phone) {\n    display: none;\n  }\n}\n\n.region--header__logo__image-wrapper {\n  display: inline-block;\n  position: relative;\n  z-index: 1;\n}\n\n.page-header {\n  display: block;\n  width: 100%;\n  float: left;\n\n  z-index: 1100;\n  height: 15vh;\n  min-height: 150px;\n\n  @include media($tablet-p) {\n    height: 70px;\n    min-height: 10px;\n  }\n}\n\n.date {\n  color: $gray-medium;\n}\n\n.date--header {\n  font-weight: bold;\n  font-size: em(14, $base-font-size);\n  margin-bottom: 5px;\n}\n","// Convert pixels to ems\n// eg. for a relational value of 12px write em(12) when the parent is 16px\n// if the parent is another value say 24px write em(12, 24)\n\n@function em($pxval, $base: $em-base) {\n  @if not unitless($pxval) {\n    $pxval: strip-units($pxval);\n  }\n  @if not unitless($base) {\n    $base: strip-units($base);\n  }\n  @return ($pxval / $base) * 1em;\n}\n"],"sourceRoot":"/source/"}